#!/bin/bash
# manage truecrypt containers using tcplay

user=$3
cryptdev=$2
mountpt=/mnt/truecrypt
userhome=`eval echo "~$SUDO_USER"`
tchome="$userhome"/.truecrypt
keyfile="$tchome"/"$cryptdev".key


# Trap SIGINT
trap cleanup_on_abort SIGINT

cleanup_on_abort(){
  printf "%s\n" "Ctrl+C detected, cleaning up."
  cleanup
}

cleanup(){
  devices=$(awk -v dev="$cryptdev" -F":" '/dev/ {print $1}' <(losetup -a))
  # unmount and remove mount point
  umount "$mountpt"
  [ -d "$mountpt" ] && rm -rf "$mountpt"
  dmsetup remove "$cryptdev" || printf "%s\n" "demapping failed"

  while read -r deviceline; do

    losetup -d "$deviceline" || printf "%s\n" "deleting $deviceline failed"

  done <<< "$devices"
}

print_usage(){
  printf "%s\n" "Usage: [Operation] [Container] [OPTIONS]
 
    create [container] [SIZE]
    open [container] [optional - user to mount as]
    close [container]
 
    The SIZE argument is an integer and optional unit (example: 10K is 10*1024).
    Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000)"
}

# must be run as root
if (( $EUID != 0 )); then
  printf "%s\n" "Root permissions required."
  exit 1
fi

# create container and format it as ext4
if [[ $1 == create ]]; then
  
  if [ -z ${3+x} ]; then
      printf "%s\n" "Error: No size argument supplied."
      print_usage

  else
      loopdev=$(losetup -f)
      fallocate -l "$3" "$cryptdev"
      losetup "$loopdev" "$cryptdev"
      sudo -u "$SUDO_USER" mkdir "$tchome"
      chmod 0700 "$tchome"
      sudo -u "$SUDO_USER" dd bs=512 count=8 if=/dev/urandom of="$keyfile" iflag=fullblock
      chmod 0600 "$keyfile"
      tcplay -c -d "$loopdev" -a whirlpool -b AES-256-XTS -k "$keyfile"
      tcplay -m "$cryptdev" -d "$loopdev" -k "$keyfile"
      mkfs.ext4 /dev/mapper/"$cryptdev"
      sleep 2
      dmsetup remove "$cryptdev"
      losetup -d "$loopdev"
  fi

# decrypt and mount container
elif [[ $1 == open ]]; then
  loopdev=$(losetup -f)
  losetup "$loopdev" "$cryptdev"
  tcplay -m "$cryptdev" -d "$loopdev" -k "$keyfile"

  # read passphrase
  read -r -s passphrase <<EOF
  "$passphrase"
EOF

  # mount container
  [[ -d $mountpt ]] || mkdir "$mountpt"

  # mount options
  if [ -z ${3+x} ]; then
      mount /dev/mapper/"$cryptdev" "$mountpt"
  else
      mount -o nodev,nosuid /dev/mapper/"$cryptdev" "$mountpt"
  fi

# close container and clean up
elif [[ $1 == close ]]; then
  cleanup
  
else
  print_usage

fi
